<HTML>
<HEAD>
<TITLE>Оценка качества распределения</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../../../shared/styles/styles.css">
<link rel="stylesheet" href="../../../shared/styles/highlight.styles/googlecode.css">
<META http-equiv="Content-type" content="text/html; charset=utf-8" />
<script src="../../../shared/scripts/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</HEAD>
<BODY>
    <DIV>
        <H1>ОЦЕНКА КАЧЕСТВА РАСПРЕДЕЛЕНИЯ</H1>
        <P>Для того, чтобы оценить качество генератора случайных чисел, необходимо определить, насколько близко псевдослучайное распределение, полученное генератором, к случайному.</P>
        <P>Одним из простейших методов оценки является графический. В данном методе строится, например, гистограмма распределения элементов полученной последовательности, и зрительно оценивается её соответствие ожидаемому распределению.</P>
        <P>В качестве примера будет проведена оценка качества генератора псевдослучайного экспоненциального распределения с интенсивностью 1, базовое распределение для которого было получено в разделе "<A href="rdo_theory_principles.htm#base_uniform_distribution">Принципы генерации псевдослучайных чисел</A>", а преобразование к экспоненциальному выполнено в разделе "<A href="rdo_theory_seq_inverse.htm#exponential_distribution">Метод обратного преобразования</A>".</P>
        <P>Полный код генератора приведен ниже.</P>
        <PRE><code class="cpp">#include &lt;iostream&gt;
#include &lt;climits&gt;
#include &lt;cmath&gt;

static const unsigned int seed_init = 123456789;
static const int magic = 69069;

static unsigned int seed;

static double base_uniform()
{
    seed = seed * magic + 1;
    return (double) seed / UINT_MAX;
}

static double exp_distr(double lambda, double factor)
{
    return -1 * log(1 - base_uniform()) / lambda * factor;
}

int main(void)
{
    seed = seed_init;
    for (int i = 0; i &lt; 10000; ++i) {
        std::cout &lt;&lt; exp_distr(1, 1) &lt;&lt; std::endl;
    }
    return 0;
}</code></PRE>
        <P>Выходными данными программы являются 10000 псевдослучайных чисел, распределенных по экспоненциальному закону.</P>
        <P>Для получения гистограммы выходные данные генератора сохраняются в файл:</P>
        <PRE><code class="shell">./rng_exp.o > data.csv</code></PRE>
        <P>А затем, с помощью расширения NumPy для python строится гистограмма. Код программы приведен ниже.</P>
        <PRE><code class="python">import numpy as np
from matplotlib import pyplot

a = np.genfromtxt('data.csv')
print "length =", a.size, ", min =", min(a), ", max =", max(a), ", mean =", a.mean(), ", stddev =", a.std()
pyplot.hist(a, bins=40)
pyplot.show()</code></PRE>
        <P>В результате будет построена гистограмма, имеющая следующий вид:</P>
        <P class="image"><IMG align="left" src="../../images/hist_exp.png"></P><BR style="clear:both;"/><BR>
        <P>И следующие параметры:</P>
        <PRE><code>length =  10000 , min =  4.62252e-07 , max =  9.74167 , mean =  1.0147809955 , stddev 1.0106752669</code></PRE>
        <P>Визуальная оценка в данном случае показывает, что форма распределения достаточно близка к ожидаемой, и подобный генератор вполне может использоваться, например, в моделировании.</P>
        <P>Полученные значения математического ожидания и стандартного отклонения также близки к теоретическим (в данном случае 1 и 1 соответственно):</P>
        <H4>См. также</H4>
        <P><A href="rdo_theory.htm">Основные теоретические сведения</A></P>
        <P><A href="rdo_theory_principles.htm">Принципы генерации псевдослучайных чисел</A></P>
        <P><A href="rdo_theory_generator_seed.htm">База генератора</A></P>
        <P><A href="rdo_theory_seq.htm">Законы распределения</A></P>
        <P><A href="rdo_theory_seq_inverse.htm">Метод обратного преобразования</A></P>
    </DIV>
</BODY>
</HTML>