<HTML>
<HEAD>
<TITLE>Принципы генерации псевдослучайных чисел</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../../../shared/styles/styles.css">
<link rel="stylesheet" href="../../../shared/styles/highlight.styles/googlecode.css">
<META http-equiv="Content-type" content="text/html; charset=utf-8" />
<script src="../../../shared/scripts/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</HEAD>
<BODY>
    <DIV>
        <H1>СЛУЧАЙНЫЕ И ПСЕВДОСЛУЧАЙНЫЕ ЧИСЛА</H1>
        <P>Существует два основных метода получения случайных чисел.</P>
        <P>Первый заключается в использовании некоторого физического явления (источник энтропии), от которого ожидается случайное поведение, например, атмосферные и тепловые шумы, радиоактивный распад и другие явления. В персональных компьютерах часто используется счетчик тактов процессора. Полученные таким образом числа являются по-настоящему <B>случайными</B>, а генераторы, использующиеся для их получения, называются <B>генераторами случайных чисел (ГСЧ)</B>. Основными недостатками подобных методов является низкая частота измерений (которая ограничена особенностями физического явления и прибора измерения) и возможность атак на источник энтропии.</P>
        <P>Второй метод заключается в использовании детерминированных алгоритмов, преобразовывающих некоторое начальное число, называемое <A href="rdo_theory_generator_seed.htm">базой генератора</A>. Подобные генераторы называются <B>генераторами псевдослучайных чисел (ГПСЧ)</B>, а генерируемые ими числа, соответственно, <B>псевдослучайными</B>. Термины "генератор псевдослучайных чисел" и "датчик псевдослучайных чисел" следует считать синонимами. С помощью ГПСЧ возможно получить распределение, очень близкое к случайному.</P>
        <P>В имитационном моделировании используются ГПСЧ. При этом от генератора требуются следующие свойства:</P>
        <UL>
            <LI><B>Детерминированность</B>. Генератор должен выдавать одинаковые последовательности при одинаковых значениях базы. Это свойство чрезвычайно удобно при отладке моделей и ползволяет проводить воспроизводимые эксперименты.</LI>
            <LI><B>Большая длина цикла</B>. Любой ГПСЧ рано или поздно зацикливается, потому что обладает конечным набором состояний. Чем больше длина цикла, тем лучше ведет себя генератор при долгих прогонах.</LI>
        </UL>
        <H1>ГЕНЕРАЦИЯ ПСЕВДОСЛУЧАЙНЫХ ЧИСЕЛ</H1>
        <P>Генерация псевдослучайных чисел будет рассмотрена на примере базового равномерного распределения. Базовое равномерное распределение представляет собой равномерное распределение на интервале от 0 до 1. Данное распределение используется как основа для <A href="rdo_theory_seq_inverse.htm">получения распределений по другим законам</A>.</P>
        <P>Одним из простейших алгоритмов генерации псевдослучайных чисел является <A href="https://ru.wikipedia.org/wiki/Линейный_конгруэнтный_метод">линейный конгруэнтный метод</A>. Суть заключается в том, что база генератора все время растет и переполняет память, которая ограничена, например, 8 байтами. Лишнее отбрасывается.</P>
        <P><A name="base_uniform_distribution"></A>Ниже приведен программы на языке C++, которая выводит на экран первые 100 чисел базового равномерного распределения с базой 123456789.</P>
        <PRE><code class="cpp">#include &lt;iostream&gt;
#include &lt;climits&gt;

static const unsigned int seed_init = 123456789;
static const int magic = 69069;

static unsigned int seed;

static double base_uniform()
{
    seed = seed * magic + 1;
    return (double) seed / UINT_MAX;
}

int main(void)
{
    seed = seed_init;
    for (int i = 0; i &lt; 10000; ++i) {
        std::cout &lt;&lt; base_uniform() &lt;&lt; std::endl;
    }
    return 0;
}</code></PRE>
        <P><I>MAGIC</I> - это число, благодаря которому получается все гладко и красиво, но объяснения этому явлению найти не удалось. В данном примере MAGIC = 69069.</P>
        <P><I>+1</I> - благодаря этому можно не беспокоится о том, что база обратится в ноль, и генератор всегда начнет возвращать только лишь 0. Функция возвращает максимально возможное для 8 байт число плюс 1. Т.е. результатом работы генератора является приведенная база генератора. В итоге возвращается псевдо-случайное число, значение в диапазоне [0, 1).</P>
        <P>Ниже приведен алгоритм работы генератора.</P>
        <P class="image"><IMG align="absmiddle" src="../../images/theory_basedistribution_scheme.png"></P>
        <H4>См. также</H4>
        <P><A href="rdo_theory.htm">Основные теоретические сведения</A></P>
        <P><A href="rdo_theory_generator_seed.htm">База генератора</A></P>
        <P><A href="rdo_theory_seq.htm">Законы распределения</A></P>
        <P><A href="rdo_theory_seq_inverse.htm">Метод обратного преобразования</A></P>
        <P><A href="rdo_theory_estimation.htm">Оценка качества распределения</A></P>
    </DIV>
</BODY>
</HTML>