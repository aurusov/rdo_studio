// Действие по обслуживанию клиента, описывается образцом типа operation,
// т.к. операция обслуживания имеет длительность и условие начала
$Pattern Образец_обслуживания_клиента : operation
$Relevant_resources
    // В качестве релевантных ресурсов указываем:
    // 1. Единственную парикмахерскую, в котрую приходят клиенты
    // 2. Одного из клиентов, который находится в состоянии Пришел
    // 3. Одного из парикмахеров, который может (состояние = Свободен) и
    //    умеет (совпал тип) стрич выбранного клиента
    // При этом, состояние парикмахерской изменяется только в начале действия (Keep/NoChange),
    // клиент вообще будет удален из модели в конце стрижки (Keep/Erase), а парикмахер
    // изменяет свое состояние и в начале и в конце стрижки (Keep/Keep)
    _Парикмахерская: Парикмахерская Keep NoChange
    _Клиент        : Клиенты        Keep Erase
    _Парикмахер    : Парикмахеры    Keep Keep
$Time = Длительность_обслуживания( _Парикмахер.длительность_min, _Парикмахер.длительность_max )
/*
Продолжительность стрижки выбирается по равномерному закону (см. FUN), параметры
которого определаются выбранным парикмахером
*/
$Body
_Парикмахерская:
    // Стрижка может начаться, если очередь не пуста
    Choice from _Парикмахерская.количество_в_очереди > 0
    Convert_begin
        // В начале действия клиент перемещается из очереди в кресло парикмахера
        количество_в_очереди--;

_Клиент:
    // Выбираем клиента, который еще не начал стрижку
    Choice from _Клиент.состояние == Пришел
    Convert_begin
        // В начале действия изменяем состояние клиента, чтобы его не подстригли дважды
        состояние = Начал_стрижку;

_Парикмахер:
    // Стрижка может начаться, если парикмахер свободен, и он умеет стрич выбранного клиента
    Choice from _Парикмахер.состояние_парикмахера == Свободен and _Парикмахер.тип_клиента == _Клиент.тип
    with_min( _Парикмахер.количество_обслуженных ) // Если сразу несколько парикмахеров
                                                   // удовлетворяют условию Choice from, то
                                                   // выбрать того из них, кто меньше всего
                                                   // подстриг клиентов
    Convert_begin
        // В начале действия парикмахер переходит в состояние Занят
        состояние_парикмахера  = Занят;
    Convert_end
        // После стрижки парикмахер становится свободным, и...
        состояние_парикмахера  = Свободен;
        // ...для статистики увеличим счетчик обслуженных клиентов
        количество_обслуженных++;
$End
